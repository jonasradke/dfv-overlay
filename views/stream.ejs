<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Stream Overlay</title>
  <style>
    /* Reset and full-screen background */
    html, body {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      background-color: #000000;
      font-family: "Avenir Next", sans-serif;
    }
    /* Set CSS variables initially using EJS from teamColors */
    :root {
      --home-color: <%= teamColors && teamColors.home ? teamColors.home : '#ca2d64' %>;
      --away-color: <%= teamColors && teamColors.away ? teamColors.away : '#63b3ed' %>;
      --primary-color: #0f172a;
      --secondary-color: #cbd5e1;
      --shadow: 0 20px 25px -5px rgba(0,0,0,0.1), 0 8px 10px -6px rgba(0,0,0,0.1);
    }
    /* Scoreboard grid (match overview) */
    .match-overview {
      display: grid;
      /* Three columns (home, score, away) and two rows (first for names/score, second for timer) */
      grid-template-columns: repeat(3, 102px);
      grid-template-rows: repeat(2, 38px);
      /* Adjust margins to position the scoreboard where you like */
      margin: 64px 0 720px 100px;
      font-size: 24px;
    }
    /* Ensure all direct children are flex containers centered both horizontally and vertically */
    .match-overview > * {
      display: flex;
      justify-content: center;
      align-items: center;
    }
    /* Remove default margins on headings and force them to fill their containers */
    .match-overview h3 {
      margin: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      font-size: 1.3rem;
    }
    /* Team name styling */
    .name-team {
      background: var(--primary-color);
      color: #fff;
      text-transform: uppercase;
      letter-spacing: 1px;
      position: relative;
      z-index: 0;
    }
    /* Colored bar for home team */
    .name-team-home::after {
      content: "";
      position: absolute;
      width: 6px;
      top: 0;
      right: calc(100% + 2px);
      bottom: 0;
      background: var(--home-color);
    }
    /* Colored bar for away team */
    .name-team-away::after {
      content: "";
      position: absolute;
      width: 6px;
      top: 0;
      left: calc(100% + 2px);
      bottom: 0;
      background: var(--away-color);
    }
    /* Score cell styling */
    .score {
      overflow: hidden;
      background: var(--secondary-color);
      color: #023321;
      min-width: 4.2rem;
      box-shadow: var(--shadow);
      z-index: 1;
      display: grid;
      grid-template-columns: 1fr 20px 1fr;
    }
    /* Center each part of the score cell */
    .score > * {
      display: flex;
      justify-content: center;
      align-items: center;
    }
    /* Time cell styling – the timer will appear in the center of the bottom row */
    .time {
      background: #f9f7f7;
      color: #1a202c;
      padding: 0 0.4rem;
      min-width: 5rem;
      grid-column-start: 2;
    }
  </style>
</head>
<body>
  <% 
    // Helper function: Returns the first three letters of a team name in uppercase.
    function formatTeam(name) {
      if (!name) return "";
      return name.trim().substring(0, 3).toUpperCase();
    }
  %>
  <div class="match-overview">
    <% if (match) { %>
      <!-- First row: Home team name, score, Away team name -->
      <div class="name-team name-team-home">
        <h3><%= formatTeam(match.teams.home) %></h3>
      </div>
      <div class="score">
        <div class="score-team-home"><h3><%= match.scores.home %></h3></div>
        <div class="divider"><h3>–</h3></div>
        <div class="score-team-away"><h3><%= match.scores.away %></h3></div>
      </div>
      <div class="name-team name-team-away">
        <h3><%= formatTeam(match.teams.away) %></h3>
      </div>
      <!-- Second row: Empty cells for columns 1 and 3; timer in column 2 -->
      <div></div>
      <div class="time">
        <h3 id="streamTimer">00:00</h3>
      </div>
      <div></div>
    <% } else { %>
      <!-- If no match is selected, show placeholders -->
      <div class="name-team name-team-home">
        <h3>--</h3>
      </div>
      <div class="score">
        <div class="score-team-home"><h3></h3></div>
        <div class="divider"><h3>–</h3></div>
        <div class="score-team-away"><h3></h3></div>
      </div>
      <div class="name-team name-team-away">
        <h3>--</h3>
      </div>
      <div></div>
      <div class="time">
        <h3 id="streamTimer">00:00</h3>
      </div>
      <div></div>
    <% } %>
  </div>

  <script>
    // Update the timer every second
    function updateTimer() {
      fetch('/timer')
        .then(res => res.json())
        .then(data => {
          let seconds = Math.floor(data.currentTime);
          const mm = String(Math.floor(seconds / 60)).padStart(2, '0');
          const ss = String(seconds % 60).padStart(2, '0');
          document.getElementById('streamTimer').textContent = mm + ':' + ss;
        })
        .catch(err => console.error(err));
    }
    setInterval(updateTimer, 1000);
    updateTimer();

    // Update overlay data every 5 seconds
    async function updateOverlay() {
      try {
        const res = await fetch('/state');
        const state = await res.json();
        if (state.selectedGame) {
          const { leagueId, matchIndex } = state.selectedGame;
          const resMatches = await fetch(`/matches/${leagueId}`);
          const matches = await resMatches.json();
          const match = matches[matchIndex];
          if (match) {
            document.querySelector('.name-team-home h3').textContent = formatTeam(match.teams.home);
            document.querySelector('.score .score-team-home h3').textContent = match.scores.home;
            document.querySelector('.score .score-team-away h3').textContent = match.scores.away;
            document.querySelector('.name-team-away h3').textContent = formatTeam(match.teams.away);
          }
        } else {
          document.querySelector('.name-team-home h3').textContent = "--";
          document.querySelector('.score .score-team-home h3').textContent = "-";
          document.querySelector('.score .score-team-away h3').textContent = "-";
          document.querySelector('.name-team-away h3').textContent = "--";
        }
      } catch (err) {
        console.error(err);
      }
    }
    setInterval(updateOverlay, 5000);
    updateOverlay();

    // Helper for dynamic updates of team names
    function formatTeam(name) {
      if (!name) return "";
      return name.trim().substring(0, 3).toUpperCase();
    }

    // Live-update team colors from the backend
    async function updateTeamColors() {
      try {
        const res = await fetch('/state');
        const state = await res.json();
        if (state.teamColors) {
          document.documentElement.style.setProperty('--home-color', state.teamColors.home);
          document.documentElement.style.setProperty('--away-color', state.teamColors.away);
        }
      } catch (err) {
        console.error(err);
      }
    }
    // Update team colors every 5 seconds
    setInterval(updateTeamColors, 5000);
    updateTeamColors();
  </script>
</body>
</html>
