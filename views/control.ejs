<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Control</title>
    <style>
      /* Base Variables and Theme Variants */
      :root {
        /* Dark Mode Variables â€“ more defined */
        --bg-dark: #000000;
        --container-bg-dark: #1a1a1a;
        --text-color-dark: #f0f0f0;
        /* Light Mode Variables */
        --bg-light: #ffffff;
        --container-bg-light: #f5f5f5;
        --text-color-light: #111;
        /* Shared Variables */
        --input-bg: #222;
        --input-border: #444;
        --primary-btn: #0070f3;
        --primary-btn-hover: #005ce6;
        --start-btn: #28a745;
        --start-btn-hover: #218838;
        --pause-btn: #ffc107;
        --pause-btn-hover: #e0a800;
        --reset-btn: #dc3545;
        --reset-btn-hover: #c82333;
        --preset-btn: #6f42c1;
        --preset-btn-hover: #5a32a3;
        --team-bg: #0f172a;
        --score-bg: #cbd5e1;
        --timer-bg: #f9f7f7;
        --control-panel-bg: rgba(17, 17, 17, 0.9);
      }

      /* Explicitly hide elements with the "hidden" class */
      .hidden {
        display: none !important;
      }

      /* Additional rule for animated match picker */
      #matchSelectContainer.animate-in {
        animation: fadeInMatch 0.5s ease-out;
      }
      @keyframes fadeInMatch {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
      }

      /* Smaller timer preset input and button */
      #presetInput {
        padding: 8px 10px;
        font-size: 0.9rem;
      }
      #setPreset {
        padding: 8px 16px;
        font-size: 0.9rem;
      }

      /* Global Styles */
      body {
        margin: 0;
        height: 100vh;
        width: 100vw;
        font-family: 'Inter', sans-serif;
        overflow: hidden; /* Prevent scrolling */
        position: relative;
        font-size: 16px;
        transition: background-color 0.5s ease, color 0.5s ease;
      }
      body.dark-mode {
        background-color: var(--bg-dark);
        color: var(--text-color-dark);
      }
      body.light-mode {
        background-color: var(--bg-light);
        color: var(--text-color-light);
      }

      /* Global Notification Container */
      #notificationContainer {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }
      .notification {
        background-color: var(--primary-btn);
        color: #fff;
        padding: 10px 15px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        font-size: 1rem;
        margin-bottom: 10px;
        opacity: 0;
        transform: translateY(-20px);
        animation: fadeIn 0.6s ease-out forwards;
      }
      .slide-up {
        animation: slideUp 0.8s ease-in forwards;
      }
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
      }
      @keyframes slideUp {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(-20px); }
      }

      /* Wrapper for the windows (Main Control, Timer Controls, Team Color Controls) */
      .window-container {
        display: flex;
        gap: 20px;
        justify-content: center;
        align-items: flex-start;
        padding: 20px;
        box-sizing: border-box;
        overflow-y: auto;
        max-height: calc(100vh - 60px);
      }

      /* Main Control Window */
      .vercel-container {
        flex: 1 1 60%;
        max-width: 960px;
        padding: 2rem;
        background: var(--container-bg-dark);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        text-align: center;
        position: relative;
        z-index: 1;
        animation: fadeInPage 0.7s ease-out;
        transition: background 0.3s, box-shadow 0.3s;
      }
      body.light-mode .vercel-container {
        background: var(--container-bg-light);
      }
      @keyframes fadeInPage {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      h1 {
        margin-bottom: 20px;
        font-size: 2.5rem;
        font-weight: 600;
      }

      /* Preview Area */
      #previewArea {
        margin: 20px auto;
        max-width: 800px;
        background: var(--container-bg-dark);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        overflow: hidden;
        transition: background 0.3s, box-shadow 0.3s;
      }
      body.light-mode #previewArea {
        background: var(--container-bg-light);
      }
      #previewArea h2 {
        margin: 0;
        padding: 10px;
        background: var(--primary-btn);
        color: #fff;
        font-size: 1.5rem;
        text-align: center;
      }
      #previewArea iframe {
        width: 100%;
        height: 500px;
        border: none;
        scrolling: no;
      }

      /* Timer Controls Window */
      .timer-container {
        flex: 1 1 35%;
        max-width: 400px;
        padding: 20px;
        background: var(--container-bg-dark);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: background 0.3s;
      }
      body.light-mode .timer-container {
        background: var(--container-bg-light);
      }
      .timer-container h2 {
        margin: 0 0 10px 0;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--primary-btn);
        font-size: 1.5rem;
      }
      .form-group {
        margin-bottom: 20px;
        text-align: left;
      }
      label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        font-size: 1rem;
      }
      select,
      input[type="text"],
      input[type="number"] {
        width: 100%;
        padding: 14px 12px;
        background-color: var(--input-bg);
        color: var(--text-color-dark);
        border: 1px solid var(--input-border);
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease;
      }
      select:focus,
      input[type="text"]:focus,
      input[type="number"]:focus {
        border-color: var(--primary-btn);
        outline: none;
      }
      .action-btn, .open-modal-btn {
        padding: 14px 28px;
        font-size: 1.1rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.2s ease;
        margin-top: 20px;
      }
      .start-btn {
        background-color: var(--start-btn);
      }
      .start-btn:hover {
        background-color: var(--start-btn-hover);
      }
      .pause-btn {
        background-color: var(--pause-btn);
      }
      .pause-btn:hover {
        background-color: var(--pause-btn-hover);
      }
      .reset-btn {
        background-color: var(--reset-btn);
      }
      .reset-btn:hover {
        background-color: var(--reset-btn-hover);
      }
      .preset-btn {
        background-color: var(--preset-btn);
      }
      .preset-btn:hover {
        background-color: var(--preset-btn-hover);
      }
      .open-modal-btn {
        background-color: var(--primary-btn);
        color: #fff;
      }
      .open-modal-btn:hover {
        background-color: var(--primary-btn-hover);
        transform: scale(1.03);
      }
      .timer-buttons button {
        padding: 12px 24px;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        margin-right: 10px;
      }

      /* Team Color Controls Window */
      .color-container {
        flex: 1 1 35%;
        max-width: 400px;
        padding: 20px;
        background: var(--container-bg-dark);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: background 0.3s;
      }
      body.light-mode .color-container {
        background: var(--container-bg-light);
      }
      .color-container h2 {
        margin: 0 0 10px 0;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--primary-btn);
        font-size: 1.5rem;
      }
      .color-container .form-group {
        margin-bottom: 20px;
        text-align: left;
      }
      .color-container label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        font-size: 1rem;
      }
      .color-container input[type="color"] {
        width: 100%;
        height: 50px;
        border: none;
        padding: 0;
        background: none;
      }
      .color-container .action-btn {
        margin-top: 10px;
      }

      /* Modal Styles */
      .modal {
        display: none;
        position: fixed;
        z-index: 3000; /* Above notifications */
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.5);
      }
      .modal-content {
        background-color: var(--container-bg-dark);
        margin: 8% auto;
        padding: 30px;
        border: 1px solid var(--input-border);
        border-radius: 12px;
        max-width: 600px;
        text-align: center;
        animation: fadeInModal 0.5s ease-out;
        transition: background 0.3s;
      }
      body.light-mode .modal-content {
        background-color: var(--container-bg-light);
      }
      @keyframes fadeInModal {
        from { opacity: 0; transform: scale(0.95); }
        to { opacity: 1; transform: scale(1); }
      }
      .close {
        color: var(--text-color-dark);
        float: right;
        font-size: 1.8rem;
        font-weight: bold;
        cursor: pointer;
      }
      body.light-mode .close {
        color: var(--text-color-light);
      }
      .close:hover,
      .close:focus {
        color: var(--primary-btn);
        text-decoration: none;
      }
      
      /* Improved Slider Toggle Styles for Theme */
      .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
      }
      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #bbb;
        transition: background-color 0.4s ease;
        border-radius: 34px;
      }
      .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: transform 0.4s ease;
        border-radius: 50%;
      }
      .switch input:checked + .slider {
        background-color: var(--primary-btn);
      }
      .switch input:checked + .slider:before {
        transform: translateX(26px);
      }

      /* Footer Styles */
      footer {
        position: fixed;
        bottom: 0;
        width: 100%;
        background: var(--container-bg-dark);
        color: var(--text-color-dark);
        text-align: center;
        padding: 10px;
        font-size: 1rem;
        box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.3);
        transition: background 0.3s, color 0.3s;
      }
      body.light-mode footer {
        background: var(--container-bg-light);
        color: var(--text-color-light);
      }
      footer a {
        color: inherit;
        text-decoration: none;
      }

      /* Responsive Styles */
      @media (max-width: 768px) {
        .window-container {
          flex-direction: column;
          align-items: center;
        }
        .vercel-container,
        .timer-container,
        .color-container {
          flex: 1 1 100%;
          max-width: 100%;
        }
        #previewArea iframe {
          height: 300px;
        }
        .action-btn, .open-modal-btn {
          padding: 10px 20px;
          font-size: 1rem;
          margin-top: 10px;
        }
        .modal-content {
          margin: 10% auto;
          padding: 20px;
          max-width: 90%;
        }
        footer {
          font-size: 0.9rem;
          padding: 5px;
        }
      }
      @media (max-width: 480px) {
        h1 {
          font-size: 2rem;
        }
        #previewArea h2,
        .timer-container h2,
        .color-container h2 {
          font-size: 1.3rem;
        }
      }
    </style>
  </head>
  <body class="dark-mode">
    <% 
      // Helper: abbreviate team name to first three letters (preserve " II" if present) in uppercase.
      function formatTeam(name) {
        if (!name) return "";
        name = name.trim();
        if (name.toUpperCase().endsWith(" II")) {
          let main = name.slice(0, -3).trim();
          return main.substring(0, 3).toUpperCase() + " II";
        } else {
          return name.substring(0, 3).toUpperCase();
        }
      }
      // Safely define a local variable for 'match'
      let myMatch = (typeof match !== "undefined" && match) ? match : null;
    %>
    
    <!-- Global Notification container -->
    <div id="notificationContainer"></div>
    
    <div class="window-container">
      <div class="vercel-container">
        <h1>Control</h1>
        
        <!-- Preview Area: Only display if a game is selected -->
        <% if (selectedGame) { %>
        <div id="previewArea">
          <h2>Stream Preview</h2>
          <iframe id="streamPreview" src="/stream" scrolling="no" style="width: 100%; height: 500px;"></iframe>
        </div>
        <% } %>
        
        <!-- Open Modal Button -->
        <button id="openModalBtn" class="open-modal-btn">
          <%= selectedGame ? "Change Game" : "Select Game" %>
        </button>
      </div>
      
      <!-- Timer Controls Window (only shown if a game is selected) -->
      <% if (selectedGame) { %>
      <div class="timer-container">
        <h2>Timer Controls</h2>
        <div class="form-group">
          <label>Mode:</label>
          <label><input type="radio" name="timerMode" value="countdown" checked /> Count Down</label>
          <label><input type="radio" name="timerMode" value="countup" /> Count Up</label>
        </div>
        <div class="form-group" id="presetGroup">
          <label for="presetInput">Countdown Preset (mm:ss):</label>
          <input type="text" id="presetInput" value="05:00" />
          <button id="setPreset" class="action-btn preset-btn">Set Preset</button>
        </div>
        <div class="form-group timer-buttons">
          <button id="startTimer" class="action-btn start-btn">Start</button>
          <button id="pauseTimer" class="action-btn pause-btn">Pause</button>
          <button id="resetTimer" class="action-btn reset-btn">Reset</button>
        </div>
      </div>
      <% } %>
      
      <!-- Team Color Controls Window (only shown if a game is selected) -->
      <% if (selectedGame) { %>
      <div class="color-container">
        <h2>Team Color Controls</h2>
        <div class="form-group">
          <label for="homeColorInput">Home Team Color:</label>
          <input type="color" id="homeColorInput" value="#0f172a">
        </div>
        <div class="form-group">
          <label for="awayColorInput">Away Team Color:</label>
          <input type="color" id="awayColorInput" value="#cbd5e1">
        </div>
        <button id="setColorBtn" class="action-btn preset-btn">Set Colors</button>
      </div>
      <% } %>
    </div>
    
    <!-- Modal Popup for Game Selection -->
    <div id="modal" class="modal">
      <div class="modal-content">
        <span id="closeModalBtn" class="close">&times;</span>
        <h2>Select Game</h2>
        <div class="form-group">
          <label for="leagueSelect">Pick League:</label>
          <select id="leagueSelect">
            <option value="" disabled selected>Choose League</option>
            <% leagues.forEach(l => { %>
              <option value="<%= l.id %>"><%= l.title %></option>
            <% }) %>
          </select>
        </div>
        <!-- The match selection only appears once a league is selected -->
        <div class="form-group hidden" id="matchSelectContainer">
          <label for="matchSelect">Pick Match:</label>
          <select id="matchSelect">
            <option value="" disabled selected>Choose Match</option>
          </select>
        </div>
        <button id="setGameBtn" class="action-btn">Set Game</button>
      </div>
    </div>
    
    <footer>
      <!-- Improved Theme Toggle as a Slider -->
      <label class="switch">
        <input type="checkbox" id="themeToggle">
        <span class="slider"></span>
      </label>
      <span>Toggle Theme</span>
      <br>
      <span>Made by: <a href="mailto:web@jonasradke.com" target="_blank">Jonas Radke</a></span>
    </footer>
    
    <script>
      // Custom notification function: create, animate, and stack notifications.
      function showNotification(msg) {
        const container = document.getElementById('notificationContainer');
        const notif = document.createElement('div');
        notif.className = 'notification';
        notif.textContent = msg;
        container.appendChild(notif);
        // Let the notification display for 5 seconds, then slide up and remove.
        setTimeout(() => {
          notif.classList.add('slide-up');
          setTimeout(() => {
            container.removeChild(notif);
          }, 800);
        }, 5000);
      }
      
      // Modal handling
      const modal = document.getElementById('modal');
      const openModalBtn = document.getElementById('openModalBtn');
      const closeModalBtn = document.getElementById('closeModalBtn');
      
      openModalBtn.addEventListener('click', () => {
        modal.style.display = 'block';
      });
      closeModalBtn.addEventListener('click', () => {
        modal.style.display = 'none';
      });
      window.addEventListener('click', (event) => {
        if (event.target == modal) {
          modal.style.display = 'none';
        }
      });
      
      // Improved Theme Toggle Code with Smooth Transitions
      const themeToggle = document.getElementById('themeToggle');
      function applyTheme(theme) {
        document.body.classList.remove('light-mode', 'dark-mode');
        document.body.classList.add(theme);
      }
      const storedTheme = localStorage.getItem('theme');
      if (storedTheme) {
        applyTheme(storedTheme);
        themeToggle.checked = (storedTheme === 'dark-mode');
      } else {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          applyTheme('dark-mode');
          themeToggle.checked = true;
        } else {
          applyTheme('light-mode');
          themeToggle.checked = false;
        }
      }
      themeToggle.addEventListener('change', () => {
        if (themeToggle.checked) {
          applyTheme('dark-mode');
          localStorage.setItem('theme', 'dark-mode');
        } else {
          applyTheme('light-mode');
          localStorage.setItem('theme', 'light-mode');
        }
      });
      
      // Animate in match selection when a league is selected.
      // The match selection container remains hidden until a league is chosen.
      const leagueSelect = document.getElementById('leagueSelect');
      const matchSelect = document.getElementById('matchSelect');
      const matchSelectContainer = document.getElementById('matchSelectContainer');
      leagueSelect.addEventListener('change', async () => {
        // Hide the match select container until new matches are loaded.
        matchSelectContainer.classList.add('hidden');
        matchSelect.innerHTML = '<option disabled selected>Loading...</option>';
        const r = await fetch(`/matches/${leagueSelect.value}`);
        if (!r.ok) {
          matchSelect.innerHTML = '<option>Failed to load</option>';
          return;
        }
        const matches = await r.json();
        matchSelect.innerHTML = '';
        const defaultOpt = document.createElement('option');
        defaultOpt.value = "";
        defaultOpt.disabled = true;
        defaultOpt.selected = true;
        defaultOpt.textContent = 'Choose Match';
        matchSelect.appendChild(defaultOpt);
        matches.forEach((m, i) => {
          const o = document.createElement('option');
          o.value = i;
          o.textContent = m.teams.home + ' vs ' + m.teams.away;
          o.dataset.home = m.teams.home;
          o.dataset.away = m.teams.away;
          o.dataset.homeScore = m.scores.home;
          o.dataset.awayScore = m.scores.away;
          matchSelect.appendChild(o);
        });
        matchSelectContainer.classList.remove('hidden');
        matchSelectContainer.classList.add('animate-in');
        setTimeout(() => {
          matchSelectContainer.classList.remove('animate-in');
        }, 500);
      });
      
      // Game selection in modal
      const setGameBtn = document.getElementById('setGameBtn');
      setGameBtn.addEventListener('click', async () => {
        const leagueId = leagueSelect.value;
        const matchIndex = matchSelect.value;
        if (!leagueId || matchIndex === "") {
          showNotification("Please select a league and match.");
          return;
        }
        const res = await fetch('/setGame', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ leagueId, matchIndex: parseInt(matchIndex) })
        });
        const data = await res.json();
        if (data.success) {
          showNotification("Game updated successfully.");
          modal.style.display = 'none';
          location.reload();
        } else {
          showNotification("Failed to update selected game.");
        }
      });
      
      // Timer controls and preview update
      const previewTimer = document.getElementById('streamTimer');
      function fetchTimer() {
        fetch('/timer')
          .then(res => res.json())
          .then(data => {
            let seconds = Math.floor(data.currentTime);
            const mm = String(Math.floor(seconds / 60)).padStart(2, '0');
            const ss = String(seconds % 60).padStart(2, '0');
            previewTimer.textContent = mm + ':' + ss;
          });
      }
      setInterval(fetchTimer, 1000);
      fetchTimer();
      
      const timerModeRadios = document.getElementsByName('timerMode');
      const presetGroup = document.getElementById('presetGroup');
      const presetInput = document.getElementById('presetInput');
      const setPresetBtn = document.getElementById('setPreset');
      const startTimerBtn = document.getElementById('startTimer');
      const pauseTimerBtn = document.getElementById('pauseTimer');
      const resetTimerBtn = document.getElementById('resetTimer');
      
      timerModeRadios.forEach(radio => {
        radio.addEventListener('change', () => {
          const mode = radio.value;
          fetch('/timer', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ action: 'setMode', mode })
          });
          presetGroup.style.display = mode === 'countdown' ? 'block' : 'none';
        });
      });
      
      setPresetBtn.addEventListener('click', () => {
        const presetStr = presetInput.value.trim();
        const parts = presetStr.split(':');
        if (parts.length !== 2) {
          showNotification("Preset must be in mm:ss format");
          return;
        }
        const minutes = parseInt(parts[0], 10);
        const seconds = parseInt(parts[1], 10);
        if (isNaN(minutes) || isNaN(seconds)) {
          showNotification("Invalid mm:ss format");
          return;
        }
        const presetSeconds = minutes * 60 + seconds;
        fetch('/timer', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ action: 'setPreset', preset: presetSeconds })
        });
      });
      
      startTimerBtn.addEventListener('click', () => {
        fetch('/timer', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ action: 'start' })
        });
      });
      pauseTimerBtn.addEventListener('click', () => {
        fetch('/timer', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ action: 'pause' })
        });
      });
      resetTimerBtn.addEventListener('click', () => {
        fetch('/timer', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ action: 'reset' })
        });
      });
      
      // Team Color Controls: Handle color changes without refreshing the page.
      const setColorBtn = document.getElementById('setColorBtn');
      if (setColorBtn) {
        setColorBtn.addEventListener('click', () => {
          const homeColor = document.getElementById('homeColorInput').value;
          const awayColor = document.getElementById('awayColorInput').value;
          fetch('/setTeamColor', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ homeColor, awayColor })
          })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                showNotification("Team colors updated successfully.");
              } else {
                showNotification("Failed to update team colors.");
              }
            })
            .catch(err => {
              console.error(err);
              showNotification("Error updating team colors.");
            });
        });
      }
      
      // Dynamic preview: poll /state every 5 seconds to update preview if state changes
      async function updatePreview() {
        try {
          const res = await fetch('/state');
          const state = await res.json();
          if (state.selectedGame) {
            const { leagueId, matchIndex } = state.selectedGame;
            const resMatches = await fetch(`/matches/${leagueId}`);
            const matches = await resMatches.json();
            const match = matches[matchIndex];
            if (match) {
              document.querySelector('.name-team-home h3').textContent = formatTeam(match.teams.home);
              document.querySelector('.score .score-team-home h3').textContent = match.scores.home;
              document.querySelector('.score .score-team-away h3').textContent = match.scores.away;
              document.querySelector('.name-team-away h3').textContent = formatTeam(match.teams.away);
            }
          } else {
            document.querySelector('.name-team-home h3').textContent = "--";
            document.querySelector('.score .score-team-home h3').textContent = "-";
            document.querySelector('.score .score-team-away h3').textContent = "-";
            document.querySelector('.name-team-away h3').textContent = "--";
          }
        } catch (err) {
          console.error(err);
        }
      }
      setInterval(updatePreview, 5000);
      updatePreview();
      
      // Updated dynamic team name formatter to output uppercase letters
      function formatTeam(name) {
        if (!name) return "";
        return name.trim().substring(0, 3).toUpperCase();
      }
    </script>
  </body>
</html>
